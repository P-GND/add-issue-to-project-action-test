name: Add Issue to project
on:
 issues:
    types: [opened]

permissions: write-all
jobs:
  track_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}

          # ${{ github.repository_owner }}
          ACCOUNT: RobertoFioravanti 

          # number of the project https://github.com/aperson/projects/2 >
          # Test is number :1 
          PROJECT_NUMBER: 12
        run: | #gh api graphql --header 'GraphQL-Features: projects_next_graphql' -f query='
          gh api graphql -f query='
            query($account: String!, $number: Int!) {
              user(login: $account){
                projectV2(number: $number) {
                  id
                  title
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2Field {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }' -f account=$ACCOUNT -F number=$PROJECT_NUMBER > project_data.json
            
          echo 'PROJECT_ID='$(jq '.data.user.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'DATE_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Date Posted") | .id' project_data.json) >> $GITHUB_ENV
          echo 'STATUS_FIELD_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
          echo 'TODO_OPTION_ID='$(jq '.data.user.projectV2.fields.nodes[] | select(.name== "Status") | fromjson.options[] | select(.name=="ðŸ“‹ Backlog") |.id' project_data.json) >> $GITHUB_ENV

      - name: Add Issue to project
        
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id')"
          
          echo 'ITEM_ID='$item_id >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
          ISSUE_ID: ${{ github.event.issue.node_id }}

      - name: Get date
        run: echo    "DATE=$(date +"%Y-%m-%dT%H:%M:%S%:z")" >> $GITHUB_ENV              #"DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV

      - name: Set fields
        
        run: |
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
              $date_field: ID!
              $date_value: Date!
            ) {
              set_status: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectV2Item {
                  id
                  }
              }
              set_date_posted: updateProjectV2ItemFieldValue(input: {
                projectId: $project
                itemId: $item
                fieldId: $date_field
                value: $date_value
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f item=$ITEM_ID -f status_field=$STATUS_FIELD_ID -f status_value=${{ env.TODO_OPTION_ID }} -f date_field=$DATE_FIELD_ID -f date_value=$DATE --silent
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
